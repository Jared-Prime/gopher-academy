// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weather.proto

/*
Package weather is a generated protocol buffer package.

It is generated from these files:
	weather.proto

It has these top-level messages:
	GetForecastDayRequest
	ForecastDayInfo
	GetForecastWeekRequest
	ForecastWeekInfo
*/
package weather

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DayOfWeek int32

const (
	DayOfWeek_Sun DayOfWeek = 0
	DayOfWeek_Mon DayOfWeek = 1
	DayOfWeek_Tue DayOfWeek = 2
	DayOfWeek_Wed DayOfWeek = 3
	DayOfWeek_Thu DayOfWeek = 4
	DayOfWeek_Fri DayOfWeek = 5
	DayOfWeek_Sat DayOfWeek = 6
)

var DayOfWeek_name = map[int32]string{
	0: "Sun",
	1: "Mon",
	2: "Tue",
	3: "Wed",
	4: "Thu",
	5: "Fri",
	6: "Sat",
}
var DayOfWeek_value = map[string]int32{
	"Sun": 0,
	"Mon": 1,
	"Tue": 2,
	"Wed": 3,
	"Thu": 4,
	"Fri": 5,
	"Sat": 6,
}

func (x DayOfWeek) String() string {
	return proto.EnumName(DayOfWeek_name, int32(x))
}
func (DayOfWeek) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TemperatureUnit int32

const (
	TemperatureUnit_Celsius    TemperatureUnit = 0
	TemperatureUnit_Fahrenheit TemperatureUnit = 1
)

var TemperatureUnit_name = map[int32]string{
	0: "Celsius",
	1: "Fahrenheit",
}
var TemperatureUnit_value = map[string]int32{
	"Celsius":    0,
	"Fahrenheit": 1,
}

func (x TemperatureUnit) String() string {
	return proto.EnumName(TemperatureUnit_name, int32(x))
}
func (TemperatureUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetForecastDayRequest struct {
	DayOfWeek DayOfWeek `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,enum=DayOfWeek" json:"day_of_week,omitempty"`
}

func (m *GetForecastDayRequest) Reset()                    { *m = GetForecastDayRequest{} }
func (m *GetForecastDayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetForecastDayRequest) ProtoMessage()               {}
func (*GetForecastDayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetForecastDayRequest) GetDayOfWeek() DayOfWeek {
	if m != nil {
		return m.DayOfWeek
	}
	return DayOfWeek_Sun
}

type ForecastDayInfo struct {
	DayOfWeek   DayOfWeek       `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,enum=DayOfWeek" json:"day_of_week,omitempty"`
	Temperature string          `protobuf:"bytes,2,opt,name=temperature" json:"temperature,omitempty"`
	Unit        TemperatureUnit `protobuf:"varint,3,opt,name=unit,enum=TemperatureUnit" json:"unit,omitempty"`
	Conditions  string          `protobuf:"bytes,4,opt,name=conditions" json:"conditions,omitempty"`
}

func (m *ForecastDayInfo) Reset()                    { *m = ForecastDayInfo{} }
func (m *ForecastDayInfo) String() string            { return proto.CompactTextString(m) }
func (*ForecastDayInfo) ProtoMessage()               {}
func (*ForecastDayInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ForecastDayInfo) GetDayOfWeek() DayOfWeek {
	if m != nil {
		return m.DayOfWeek
	}
	return DayOfWeek_Sun
}

func (m *ForecastDayInfo) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func (m *ForecastDayInfo) GetUnit() TemperatureUnit {
	if m != nil {
		return m.Unit
	}
	return TemperatureUnit_Celsius
}

func (m *ForecastDayInfo) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

type GetForecastWeekRequest struct {
}

func (m *GetForecastWeekRequest) Reset()                    { *m = GetForecastWeekRequest{} }
func (m *GetForecastWeekRequest) String() string            { return proto.CompactTextString(m) }
func (*GetForecastWeekRequest) ProtoMessage()               {}
func (*GetForecastWeekRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ForecastWeekInfo struct {
	Forecasts []*ForecastDayInfo `protobuf:"bytes,1,rep,name=forecasts" json:"forecasts,omitempty"`
}

func (m *ForecastWeekInfo) Reset()                    { *m = ForecastWeekInfo{} }
func (m *ForecastWeekInfo) String() string            { return proto.CompactTextString(m) }
func (*ForecastWeekInfo) ProtoMessage()               {}
func (*ForecastWeekInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ForecastWeekInfo) GetForecasts() []*ForecastDayInfo {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

func init() {
	proto.RegisterType((*GetForecastDayRequest)(nil), "GetForecastDayRequest")
	proto.RegisterType((*ForecastDayInfo)(nil), "ForecastDayInfo")
	proto.RegisterType((*GetForecastWeekRequest)(nil), "GetForecastWeekRequest")
	proto.RegisterType((*ForecastWeekInfo)(nil), "ForecastWeekInfo")
	proto.RegisterEnum("DayOfWeek", DayOfWeek_name, DayOfWeek_value)
	proto.RegisterEnum("TemperatureUnit", TemperatureUnit_name, TemperatureUnit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WeatherForecast service

type WeatherForecastClient interface {
	GetForecastDay(ctx context.Context, in *GetForecastDayRequest, opts ...grpc.CallOption) (*ForecastDayInfo, error)
	GetForecastWeek(ctx context.Context, in *GetForecastWeekRequest, opts ...grpc.CallOption) (*ForecastWeekInfo, error)
}

type weatherForecastClient struct {
	cc *grpc.ClientConn
}

func NewWeatherForecastClient(cc *grpc.ClientConn) WeatherForecastClient {
	return &weatherForecastClient{cc}
}

func (c *weatherForecastClient) GetForecastDay(ctx context.Context, in *GetForecastDayRequest, opts ...grpc.CallOption) (*ForecastDayInfo, error) {
	out := new(ForecastDayInfo)
	err := grpc.Invoke(ctx, "/WeatherForecast/GetForecastDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherForecastClient) GetForecastWeek(ctx context.Context, in *GetForecastWeekRequest, opts ...grpc.CallOption) (*ForecastWeekInfo, error) {
	out := new(ForecastWeekInfo)
	err := grpc.Invoke(ctx, "/WeatherForecast/GetForecastWeek", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WeatherForecast service

type WeatherForecastServer interface {
	GetForecastDay(context.Context, *GetForecastDayRequest) (*ForecastDayInfo, error)
	GetForecastWeek(context.Context, *GetForecastWeekRequest) (*ForecastWeekInfo, error)
}

func RegisterWeatherForecastServer(s *grpc.Server, srv WeatherForecastServer) {
	s.RegisterService(&_WeatherForecast_serviceDesc, srv)
}

func _WeatherForecast_GetForecastDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherForecastServer).GetForecastDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeatherForecast/GetForecastDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherForecastServer).GetForecastDay(ctx, req.(*GetForecastDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherForecast_GetForecastWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherForecastServer).GetForecastWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeatherForecast/GetForecastWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherForecastServer).GetForecastWeek(ctx, req.(*GetForecastWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeatherForecast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherForecast",
	HandlerType: (*WeatherForecastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForecastDay",
			Handler:    _WeatherForecast_GetForecastDay_Handler,
		},
		{
			MethodName: "GetForecastWeek",
			Handler:    _WeatherForecast_GetForecastWeek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}

func init() { proto.RegisterFile("weather.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6b, 0xe2, 0x40,
	0x14, 0xc7, 0x33, 0xc6, 0x55, 0xf2, 0xc2, 0x9a, 0xd9, 0x81, 0x75, 0x83, 0x87, 0x25, 0x84, 0x3d,
	0x88, 0x87, 0x39, 0xb8, 0xd7, 0x42, 0xa1, 0x8a, 0xa5, 0x85, 0x52, 0x48, 0x2d, 0x1e, 0x65, 0x6a,
	0x5e, 0x48, 0xb0, 0x9d, 0xb1, 0xc9, 0x04, 0xf1, 0x5b, 0xf4, 0x4b, 0xf4, 0x7b, 0x96, 0x8c, 0xb5,
	0xa6, 0xa9, 0x97, 0xde, 0xfe, 0xfc, 0xdf, 0xbc, 0xc7, 0xfb, 0xbd, 0xff, 0xc0, 0xcf, 0x2d, 0x0a,
	0x9d, 0x62, 0xce, 0x37, 0xb9, 0xd2, 0x2a, 0x9c, 0xc0, 0xef, 0x4b, 0xd4, 0x33, 0x95, 0xe3, 0x4a,
	0x14, 0x7a, 0x2a, 0x76, 0x11, 0x3e, 0x97, 0x58, 0x68, 0x36, 0x02, 0x37, 0x16, 0xbb, 0xa5, 0x4a,
	0x96, 0x5b, 0xc4, 0xb5, 0x4f, 0x02, 0x32, 0xec, 0x8d, 0x81, 0x4f, 0xc5, 0xee, 0x36, 0x59, 0x20,
	0xae, 0x23, 0x27, 0x3e, 0xc8, 0xf0, 0x95, 0x80, 0x57, 0x1b, 0x71, 0x25, 0x13, 0xf5, 0x9d, 0x7e,
	0x16, 0x80, 0xab, 0xf1, 0x69, 0x83, 0xb9, 0xd0, 0x65, 0x8e, 0x7e, 0x2b, 0x20, 0x43, 0x27, 0xaa,
	0x5b, 0xec, 0x1f, 0xb4, 0x4b, 0x99, 0x69, 0xdf, 0x36, 0x63, 0x28, 0x9f, 0x1f, 0x6b, 0xf7, 0x32,
	0xd3, 0x91, 0xa9, 0xb2, 0xbf, 0x00, 0x2b, 0x25, 0xe3, 0x4c, 0x67, 0x4a, 0x16, 0x7e, 0xdb, 0x8c,
	0xa9, 0x39, 0xa1, 0x0f, 0xfd, 0x1a, 0xac, 0xd9, 0x62, 0x4f, 0x1b, 0x5e, 0x00, 0xad, 0xdb, 0x86,
	0x80, 0x83, 0x93, 0xbc, 0x7b, 0x85, 0x4f, 0x02, 0x7b, 0xe8, 0x8e, 0x29, 0x6f, 0x60, 0x46, 0xc7,
	0x27, 0xa3, 0x6b, 0x70, 0x3e, 0xe8, 0x58, 0x17, 0xec, 0xbb, 0x52, 0x52, 0xab, 0x12, 0x37, 0x4a,
	0x52, 0x52, 0x89, 0x79, 0x89, 0xb4, 0x55, 0x89, 0x05, 0xc6, 0xd4, 0x36, 0x4e, 0x5a, 0xd2, 0x76,
	0x25, 0x66, 0x79, 0x46, 0x7f, 0x98, 0x2e, 0xa1, 0x69, 0x67, 0xc4, 0xc1, 0x6b, 0x20, 0x32, 0x17,
	0xba, 0x13, 0x7c, 0x2c, 0xb2, 0xb2, 0xa0, 0x16, 0xeb, 0x01, 0xcc, 0x44, 0x9a, 0xa3, 0x4c, 0x31,
	0xd3, 0x94, 0x8c, 0x5f, 0x08, 0x78, 0x8b, 0x7d, 0xb0, 0x87, 0x0d, 0xd9, 0x19, 0xf4, 0x3e, 0x47,
	0xcb, 0xfa, 0xfc, 0x64, 0xd6, 0x83, 0x2f, 0x58, 0xa1, 0xc5, 0xce, 0xc1, 0x6b, 0xdc, 0x8a, 0xfd,
	0xe1, 0xa7, 0xaf, 0x37, 0xf8, 0xc5, 0x9b, 0xc7, 0x0b, 0xad, 0x87, 0x8e, 0xf9, 0x60, 0xff, 0xdf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xb8, 0x38, 0x8f, 0x71, 0x02, 0x00, 0x00,
}
