// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/healthcheck.proto

/*
Package healthcheck is a generated protocol buffer package.

It is generated from these files:
	protocol/healthcheck.proto

It has these top-level messages:
	HealthcheckRequest
	HealthcheckResponse
*/
package healthcheck

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthcheckResponse_Status int32

const (
	HealthcheckResponse_Standby  HealthcheckResponse_Status = 0
	HealthcheckResponse_Starting HealthcheckResponse_Status = 1
	HealthcheckResponse_Ready    HealthcheckResponse_Status = 2
)

var HealthcheckResponse_Status_name = map[int32]string{
	0: "Standby",
	1: "Starting",
	2: "Ready",
}
var HealthcheckResponse_Status_value = map[string]int32{
	"Standby":  0,
	"Starting": 1,
	"Ready":    2,
}

func (x HealthcheckResponse_Status) String() string {
	return proto.EnumName(HealthcheckResponse_Status_name, int32(x))
}
func (HealthcheckResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type HealthcheckRequest struct {
}

func (m *HealthcheckRequest) Reset()                    { *m = HealthcheckRequest{} }
func (m *HealthcheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthcheckRequest) ProtoMessage()               {}
func (*HealthcheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthcheckResponse struct {
	Status HealthcheckResponse_Status `protobuf:"varint,1,opt,name=status,enum=HealthcheckResponse_Status" json:"status,omitempty"`
}

func (m *HealthcheckResponse) Reset()                    { *m = HealthcheckResponse{} }
func (m *HealthcheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthcheckResponse) ProtoMessage()               {}
func (*HealthcheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthcheckResponse) GetStatus() HealthcheckResponse_Status {
	if m != nil {
		return m.Status
	}
	return HealthcheckResponse_Standby
}

func init() {
	proto.RegisterType((*HealthcheckRequest)(nil), "HealthcheckRequest")
	proto.RegisterType((*HealthcheckResponse)(nil), "HealthcheckResponse")
	proto.RegisterEnum("HealthcheckResponse_Status", HealthcheckResponse_Status_name, HealthcheckResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Healthcheck service

type HealthcheckClient interface {
	Ok(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
}

type healthcheckClient struct {
	cc *grpc.ClientConn
}

func NewHealthcheckClient(cc *grpc.ClientConn) HealthcheckClient {
	return &healthcheckClient{cc}
}

func (c *healthcheckClient) Ok(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := grpc.Invoke(ctx, "/Healthcheck/Ok", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Healthcheck service

type HealthcheckServer interface {
	Ok(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
}

func RegisterHealthcheckServer(s *grpc.Server, srv HealthcheckServer) {
	s.RegisterService(&_Healthcheck_serviceDesc, srv)
}

func _Healthcheck_Ok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcheckServer).Ok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Healthcheck/Ok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcheckServer).Ok(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Healthcheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Healthcheck",
	HandlerType: (*HealthcheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ok",
			Handler:    _Healthcheck_Ok_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/healthcheck.proto",
}

func init() { proto.RegisterFile("protocol/healthcheck.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0xcf, 0x48, 0x4d, 0xcc, 0x29, 0xc9, 0x48, 0xce, 0x48, 0x4d, 0xce,
	0xd6, 0x03, 0x0b, 0x2a, 0x89, 0x70, 0x09, 0x79, 0x20, 0x04, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x94, 0xaa, 0xb8, 0x84, 0x51, 0x44, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x8c, 0xb9,
	0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xa4, 0xf5,
	0xb0, 0xa8, 0xd2, 0x0b, 0x06, 0x2b, 0x09, 0x82, 0x2a, 0x55, 0xd2, 0xe3, 0x62, 0x83, 0x88, 0x08,
	0x71, 0x73, 0xb1, 0x07, 0x97, 0x24, 0xe6, 0xa5, 0x24, 0x55, 0x0a, 0x30, 0x08, 0xf1, 0x70, 0x71,
	0x04, 0x97, 0x24, 0x16, 0x95, 0x64, 0xe6, 0xa5, 0x0b, 0x30, 0x0a, 0x71, 0x72, 0xb1, 0x06, 0xa5,
	0x26, 0xa6, 0x54, 0x0a, 0x30, 0x19, 0x39, 0x70, 0x71, 0x23, 0x99, 0x2a, 0x64, 0xc8, 0xc5, 0xe4,
	0x9f, 0x2d, 0x24, 0xac, 0x87, 0xe9, 0x4a, 0x29, 0x11, 0x6c, 0xd6, 0x2b, 0x31, 0x24, 0xb1, 0x81,
	0xbd, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x75, 0xfe, 0x87, 0xf8, 0x00, 0x00, 0x00,
}
